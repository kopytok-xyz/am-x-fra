// –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateFormNavTip –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
function updateFormNavTip() {
  const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;
  const formNavTipText = document.querySelector('[form-nav-tip-text]') as HTMLElement;

  if (currentScreen && formNavTipText) {
    const screenTip = currentScreen.getAttribute('screen-tip');
    if (screenTip) {
      formNavTipText.textContent = screenTip;
    } else {
      formNavTipText.textContent = '*';
    }
  }
}

export const func_formLogic = () => {
  const all_formLogicEl = document.querySelectorAll('.section_multistep-form-block');
  if (all_formLogicEl.length) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    updateFormNavTip();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
function clearAllInputsOnScreen(screen: HTMLElement) {
  if (!screen) return;

  // –ò—â–µ–º –≤—Å–µ —Ç–∏–ø—ã –∏–Ω–ø—É—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
  const textInputs = screen.querySelectorAll(
    'input[type="text"], input[type="email"], input[type="tel"], input[type="number"], textarea'
  );
  const checkboxes = screen.querySelectorAll('input[type="checkbox"]');
  const radioButtons = screen.querySelectorAll('input[type="radio"]');
  const selects = screen.querySelectorAll('select');

  // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–ø—É—Ç—ã –∏ textarea
  textInputs.forEach((input) => {
    (input as HTMLInputElement).value = '';
  });

  // –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫–∏ —Å —á–µ–∫–±–æ–∫—Å–æ–≤
  checkboxes.forEach((checkbox) => {
    const checkboxInput = checkbox as HTMLInputElement;
    if (checkboxInput.checked) {
      checkboxInput.checked = false;
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç checked-status, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      checkboxInput.setAttribute('checked-status', 'false');

      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å is-checked —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
      const card = checkboxInput.closest('[card-checkbox-view]');
      if (card) {
        card.classList.remove('is-checked');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ validate
      const changeEvent = new Event('change', { bubbles: true });
      checkboxInput.dispatchEvent(changeEvent);
    }
  });

  // –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä —Å —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
  radioButtons.forEach((radio) => {
    const radioInput = radio as HTMLInputElement;
    if (radioInput.checked) {
      radioInput.checked = false;

      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å is-checked —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
      const card = radioInput.closest('[card-checkbox-view]');
      if (card) {
        card.classList.remove('is-checked');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è —ç—Ç–æ–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
      const changeEvent = new Event('change', { bubbles: true });
      radioInput.dispatchEvent(changeEvent);
    }
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤ —Å–µ–ª–µ–∫—Ç–∞—Ö
  selects.forEach((select) => {
    const selectElement = select as HTMLSelectElement;
    if (selectElement.selectedIndex !== 0) {
      selectElement.selectedIndex = 0;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–ª–µ–∫—Ç–∞
      const changeEvent = new Event('change', { bubbles: true });
      selectElement.dispatchEvent(changeEvent);
    }
  });

  // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ updateValidateButtonState —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç
  // –≤—ã–∑–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è change –Ω–∞ —á–µ–∫–±–æ–∫—Å–∞—Ö

  console.log(`–í—Å–µ –∏–Ω–ø—É—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ ${screen.getAttribute('screen-name')} –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞ —Å fake-–∫–Ω–æ–ø–æ–∫ –Ω–∞ real-–∫–Ω–æ–ø–∫–∏
function setupFakeButtonRedirection() {
  const fakeButtons = document.querySelectorAll('[form-button-fake]');
  const realButton = document.querySelector('[form-button-real]');

  if (fakeButtons.length && realButton) {
    fakeButtons.forEach((fakeButton) => {
      fakeButton.addEventListener('click', (event) => {
        event.preventDefault();

        // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        (realButton as HTMLElement).click();

        console.log('–ö–ª–∏–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å fake-–∫–Ω–æ–ø–∫–∏ –Ω–∞ real-–∫–Ω–æ–ø–∫—É');
      });
    });

    console.log(
      `–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ —Å ${fakeButtons.length} fake-–∫–Ω–æ–ø–æ–∫ –Ω–∞ real-–∫–Ω–æ–ø–∫—É`
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º radio-trigger-redirect
function setupRadioTriggerRedirection() {
  const radioTriggers = document.querySelectorAll('[radio-trigger-redirect]');

  if (radioTriggers.length) {
    radioTriggers.forEach((trigger) => {
      trigger.addEventListener('click', (event) => {
        event.preventDefault();

        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ radio-trigger-redirect
        const targetValue = trigger.getAttribute('radio-trigger-redirect');

        if (targetValue) {
          // –ò—â–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–µ —Å —Ç–∞–∫–∏–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º value
          const formPopup = document.querySelector('[form-popup]');
          if (formPopup) {
            const targetRadio = formPopup.querySelector(
              `input[type="radio"][value="${targetValue}"]`
            ) as HTMLInputElement;

            if (targetRadio) {
              // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–µ
              targetRadio.click();
              console.log(`–ö–ª–∏–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É —Å value="${targetValue}"`);

              // –ï—Å–ª–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º card-checkbox-view,
              // –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
              const parentCard = targetRadio.closest('[card-checkbox-view]');
              if (parentCard) {
                parentCard.classList.add('is-checked');
              }
            } else {
              console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ —Å value="${targetValue}" –≤ —Ñ–æ—Ä–º–µ`);
            }
          } else {
            console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ [form-popup] –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
          }
        }
      });
    });

    console.log(
      `–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ —Å ${radioTriggers.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º radio-trigger-redirect`
    );
  }
}

document.addEventListener('DOMContentLoaded', () => {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ —Å fake-–∫–Ω–æ–ø–æ–∫ –Ω–∞ real-–∫–Ω–æ–ø–∫–∏
  setupFakeButtonRedirection();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ radio-trigger-redirect –Ω–∞ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
  setupRadioTriggerRedirection();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ checked-status —É —á–µ–∫–±–æ–∫—Å–æ–≤
  function initCheckboxStatus() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    checkboxes.forEach((checkbox) => {
      const checkboxInput = checkbox as HTMLInputElement;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ checked-status
      checkboxInput.setAttribute('checked-status', checkboxInput.checked ? 'true' : 'false');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Å–∞ .wf-input-is-checked —É —Ä–æ–¥–∏—Ç–µ–ª—è
      if (checkboxInput.checked && checkboxInput.parentElement) {
        checkboxInput.parentElement.classList.add('wf-input-is-checked');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —á–µ–∫–±–æ–∫—Å
      checkboxInput.addEventListener('click', () => {
        console.log(
          `üîî –ö–õ–ò–ö –ü–û –ß–ï–ö–ë–û–ö–°–£: ${checkboxInput.name || checkboxInput.id || '–±–µ–∑—ã–º—è–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å'}`
        );
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
      checkboxInput.addEventListener('change', () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç checked-status –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        checkboxInput.setAttribute('checked-status', checkboxInput.checked ? 'true' : 'false');
        console.log(
          `–ß–µ–∫–±–æ–∫—Å ${checkboxInput.name || checkboxInput.id}: checked-status="${checkboxInput.getAttribute('checked-status')}"`
        );

        // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–æ–º wf-input-is-checked —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (checkboxInput.parentElement) {
          if (checkboxInput.checked) {
            checkboxInput.parentElement.classList.add('wf-input-is-checked');
            console.log(
              `–†–æ–¥–∏—Ç–µ–ª—å —á–µ–∫–±–æ–∫—Å–∞ ${checkboxInput.name || checkboxInput.id} –ø–æ–ª—É—á–∏–ª –∫–ª–∞—Å—Å wf-input-is-checked`
            );
          } else {
            checkboxInput.parentElement.classList.remove('wf-input-is-checked');
            console.log(
              `–†–æ–¥–∏—Ç–µ–ª—å —á–µ–∫–±–æ–∫—Å–∞ ${checkboxInput.name || checkboxInput.id} –ø–æ—Ç–µ—Ä—è–ª –∫–ª–∞—Å—Å wf-input-is-checked`
            );
          }
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –∫–ª–∞—Å—Å
        const card = checkboxInput.closest('[card-checkbox-view]');
        if (card) {
          if (checkboxInput.checked) {
            card.classList.add('is-checked');
            console.log(
              `–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ ${checkboxInput.name || checkboxInput.id} –ø–æ–ª—É—á–∏–ª–∞ –∫–ª–∞—Å—Å is-checked`
            );
          } else {
            card.classList.remove('is-checked');
            console.log(
              `–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ ${checkboxInput.name || checkboxInput.id} –ø–æ—Ç–µ—Ä—è–ª–∞ –∫–ª–∞—Å—Å is-checked`
            );
          }
        }
      });
    });

    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞—Ç—Ä–∏–±—É—Ç checked-status –¥–ª—è ${checkboxes.length} —á–µ–∫–±–æ–∫—Å–æ–≤`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
    const radioButtons = document.querySelectorAll('input[type="radio"]');

    radioButtons.forEach((radio) => {
      const radioInput = radio as HTMLInputElement;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞—Å—Å–∞ .wf-input-is-checked —É —Ä–æ–¥–∏—Ç–µ–ª—è
      if (radioInput.checked && radioInput.parentElement) {
        radioInput.parentElement.classList.add('wf-input-is-checked');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
      radioInput.addEventListener('change', () => {
        // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã
        document.querySelectorAll(`input[name="${radioInput.name}"]`).forEach((rb) => {
          if (rb.parentElement) {
            rb.parentElement.classList.remove('wf-input-is-checked');
          }
        });

        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ä–æ–¥–∏—Ç–µ–ª—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
        if (radioInput.checked && radioInput.parentElement) {
          radioInput.parentElement.classList.add('wf-input-is-checked');
          console.log(
            `–†–æ–¥–∏—Ç–µ–ª—å —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ ${radioInput.name || radioInput.id} –ø–æ–ª—É—á–∏–ª –∫–ª–∞—Å—Å wf-input-is-checked`
          );
        }
      });
    });

    console.log(
      `–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–º wf-input-is-checked –¥–ª—è ${radioButtons.length} —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫`
    );
  }

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ checked-status
  initCheckboxStatus();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ [card-to-filter]
  function setupCardFiltering() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const cardsToFilter = document.querySelectorAll<HTMLElement>('[card-to-filter]');

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∏–¥–∏–º—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ø—É—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const visibleStateContainer = document.querySelector<HTMLElement>('[filter-visible-state]');
    const emptyStateContainer = document.querySelector<HTMLElement>('[filter-empty-state]');

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const clearFiltersButton = document.querySelector<HTMLElement>('[clear-filters-button]');

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const mobileFilterActiveIndicator = document.querySelector<HTMLElement>(
      '[mobile-filter-active-indicator]'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (cardsToFilter.length === 0) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [card-to-filter]');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (!visibleStateContainer) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [filter-visible-state]');
    }

    if (!emptyStateContainer) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [filter-empty-state]');
    }

    if (!mobileFilterActiveIndicator) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [mobile-filter-active-indicator]');
    }

    // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    const activeFilters: Record<string, string> = {
      'partner-type': 'all',
      branch: 'all',
      location: 'all',
    };

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º filter-by
    const filterTriggers = document.querySelectorAll<HTMLInputElement>(
      'input[type="radio"][filter-by]'
    );

    console.log(
      `–ù–∞–π–¥–µ–Ω–æ ${cardsToFilter.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ ${filterTriggers.length} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`
    );

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–π–±–ª–∞ –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
    function updateFilterLabel(inputElement: HTMLInputElement) {
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ filter-by-name
      const filterByName = inputElement.getAttribute('filter-by-name');

      if (!filterByName) {
        console.log('–ê—Ç—Ä–∏–±—É—Ç filter-by-name –Ω–µ –Ω–∞–π–¥–µ–Ω —É:', inputElement);
        return;
      }

      // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º dropdown-filter
      const dropdownTrigger = inputElement
        .closest('label')
        ?.closest('.form-dropdown-component_list')
        ?.closest('.w-dropdown');
      const dropdownFilterAttr = dropdownTrigger?.getAttribute('dropdown-filter');

      if (!dropdownTrigger || !dropdownFilterAttr) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –¥–ª—è:', inputElement);
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º dropdown-filter-current-label –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ–Ω—é
      const currentLabel = dropdownTrigger.querySelector('[dropdown-filter-current-label]');

      if (currentLabel) {
        currentLabel.textContent = filterByName;
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ dropdown-filter (${dropdownFilterAttr}): ${filterByName}`);
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function updateMobileFilterIndicator() {
      if (!mobileFilterActiveIndicator) return;

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º filter-circle-trigger
      const circleTriggerRadios = document.querySelectorAll<HTMLInputElement>(
        'input[type="radio"][filter-circle-trigger]'
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö filter-by="all"
      const hasActiveCircleTrigger = Array.from(circleTriggerRadios).some((radio) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞
        if (!radio.checked) return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ "all"
        const filterBy = radio.getAttribute('filter-by');
        return filterBy !== 'all';
      });

      if (hasActiveCircleTrigger) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ (–Ω–µ "all"), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        mobileFilterActiveIndicator.classList.remove('hide');
        console.log('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω (–∞–∫—Ç–∏–≤–µ–Ω filter-circle-trigger –Ω–µ all)');
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ "all", —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        mobileFilterActiveIndicator.classList.add('hide');
        console.log(
          '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∫—Ä—ã—Ç (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö filter-circle-trigger –∏–ª–∏ –≤—ã–±—Ä–∞–Ω all)'
        );
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function applyAllFilters() {
      console.log('–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã:', activeFilters);

      let visibleCount = 0;

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
      cardsToFilter.forEach((card) => {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É –∫–∞—Ä—Ç–æ—á–∫–∏
        const cardPartnerType = (
          card.getAttribute('filter-by-data-partner-type') || ''
        ).toLowerCase();
        const cardBranches = (card.getAttribute('filter-by-data-branches') || '').toLowerCase();
        const cardLocations = (card.getAttribute('filter-by-data-locations') || '').toLowerCase();

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∑–Ω–∞—á–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏
        const partnerTypes = cardPartnerType.split(',').map((type) => type.trim());
        const branches = cardBranches.split(',').map((branch) => branch.trim());
        const locations = cardLocations.split(',').map((location) => location.trim());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
        const matchesPartnerType =
          activeFilters['partner-type'] === 'all' ||
          partnerTypes.some((type) => type === activeFilters['partner-type']);

        const matchesBranch =
          activeFilters['branch'] === 'all' ||
          branches.some((branch) => branch === activeFilters['branch']);

        const matchesLocation =
          activeFilters['location'] === 'all' ||
          locations.some((location) => location === activeFilters['location']);

        // –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        const isVisible = matchesPartnerType && matchesBranch && matchesLocation;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å .hide –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (isVisible) {
          card.classList.remove('hide');
          visibleCount++;
        } else {
          card.classList.add('hide');
        }
      });

      console.log(`–í–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${visibleCount} –∏–∑ ${cardsToFilter.length}`);

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      if (visibleCount === 0) {
        console.warn('–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (emptyStateContainer) {
          emptyStateContainer.classList.remove('hide');
        }

        if (visibleStateContainer) {
          visibleStateContainer.classList.add('hide');
        }
      } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (emptyStateContainer) {
          emptyStateContainer.classList.add('hide');
        }

        if (visibleStateContainer) {
          visibleStateContainer.classList.remove('hide');
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
      updateMobileFilterIndicator();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function clearFilters() {
      console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º filter-can-be-clear
      const clearableFilters = document.querySelectorAll<HTMLInputElement>(
        'input[type="radio"][filter-can-be-clear]'
      );

      clearableFilters.forEach((filter) => {
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏ (–≥—Ä—É–ø–ø—ã)
        const { name } = filter;
        const firstRadio = document.querySelector<HTMLInputElement>(
          `input[type="radio"][name="${name}"][filter-by="all"]`
        );

        if (firstRadio) {
          firstRadio.checked = true;

          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
          const filterType = getFilterTypeFromName(name);
          if (filterType) {
            activeFilters[filterType] = 'all';
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª –≤ –¥—Ä–æ–ø–¥–∞—É–Ω–µ
          updateFilterLabel(firstRadio);

          // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å wf-input-is-checked –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—é
          const parent = firstRadio.closest('label');
          if (parent) {
            // –£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
            const allRadiosInGroup = document.querySelectorAll<HTMLInputElement>(
              `input[type="radio"][name="${name}"]`
            );
            allRadiosInGroup.forEach((radio) => {
              const radioParent = radio.closest('label');
              if (radioParent) {
                radioParent.classList.remove('wf-input-is-checked');
              }
            });

            // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
            parent.classList.add('wf-input-is-checked');
          }
        }
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      applyAllFilters();
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
    function getFilterTypeFromName(name: string): string | null {
      if (name.includes('partner-type')) {
        return 'partner-type';
      }
      if (name.includes('region')) {
        return 'location';
      }
      if (name.includes('purpose')) {
        return 'branch';
      }
      return null;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    filterTriggers.forEach((trigger) => {
      const triggerInput = trigger as HTMLInputElement;

      // –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç filter-by –ø—Ä—è–º–æ —Å –∏–Ω–ø—É—Ç–∞
      const filterBy = triggerInput.getAttribute('filter-by');

      if (!filterBy) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç filter-by —É —Ç—Ä–∏–≥–≥–µ—Ä–∞', triggerInput);
        return;
      }

      console.log(`–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ç—Ä–∏–≥–≥–µ—Ä: –∏–Ω–ø—É—Ç=${triggerInput.name}, filter-by=${filterBy}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
      if (triggerInput.checked) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
        const filterType = getFilterTypeFromName(triggerInput.name);
        if (filterType) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
          activeFilters[filterType] = filterBy;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ dropdown-filter-current-label
        updateFilterLabel(triggerInput);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è change –¥–ª—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
      triggerInput.addEventListener('change', () => {
        if (triggerInput.checked) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
          const filterType = getFilterTypeFromName(triggerInput.name);
          if (filterType) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
            activeFilters[filterType] = filterBy;
            console.log(`–§–∏–ª—å—Ç—Ä ${filterType} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${filterBy}`);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            applyAllFilters();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ dropdown-filter-current-label
            updateFilterLabel(triggerInput);
          }
        }
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (clearFiltersButton) {
      clearFiltersButton.addEventListener('click', (e) => {
        e.preventDefault();
        clearFilters();
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    applyAllFilters();
  }

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
  setupCardFiltering();

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
  const screenHistory: string[] = [];

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤
  const stepHistory: string[] = [];

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è "—Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö" —ç–∫—Ä–∞–Ω–æ–≤ (—Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É)
  const entryScreenNames: string[] = ['start'];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π value —É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º need-top-replace-with-js
  function replaceValuesFromParentAttributes() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –∏ —á–µ–∫–±–æ–∫—Å—ã
    const radioButtons = document.querySelectorAll('input[type="radio"]');
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    const allInputs = [...radioButtons, ...checkboxes];

    allInputs.forEach((input) => {
      const inputElement = input as HTMLInputElement;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ value
      if (!inputElement.value || inputElement.value === 'need-top-replace-with-js') {
        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º need-top-replace-with-js-src
        let parent = inputElement.parentElement;
        let sourceValue = null;

        // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –ø–æ DOM-–¥–µ—Ä–µ–≤—É, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
        while (parent && !sourceValue) {
          sourceValue = parent.getAttribute('need-top-replace-with-js-src');
          if (!sourceValue) {
            parent = parent.parentElement;
          }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ value —ç–ª–µ–º–µ–Ω—Ç–∞
        if (sourceValue) {
          inputElement.value = sourceValue;
          console.log(
            `–ó–∞–º–µ–Ω–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ value –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å id="${inputElement.id}" –Ω–∞ "${sourceValue}" –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞`
          );
        } else {
          console.log(
            `–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º need-top-replace-with-js-src –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:`,
            inputElement
          );
        }
      }
    });
  }

  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–º–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  setTimeout(replaceValuesFromParentAttributes, 100);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  function switchScreen(currentScreen: HTMLElement, nextScreen: HTMLElement) {
    // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
    currentScreen.style.transition = 'opacity 300ms ease';
    currentScreen.style.opacity = '0';

    // –ß–µ—Ä–µ–∑ 300–º—Å —Å–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    setTimeout(() => {
      // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
      currentScreen.classList.add('hide');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω (—Å–Ω–∞—á–∞–ª–∞ —Å –Ω—É–ª–µ–≤–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
      nextScreen.style.transition = 'opacity 300ms ease';
      nextScreen.style.opacity = '0';
      nextScreen.classList.remove('hide');

      // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
      void nextScreen.offsetWidth;

      // –ü–ª–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
      nextScreen.style.opacity = '1';

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
      updateFormNavTip();

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "Back"
      updateBackButtonVisibility();

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      updateBottomNavVisibility();
    }, 300);
  }

  const cardCheckboxViews = document.querySelectorAll('[card-checkbox-view]');

  cardCheckboxViews.forEach((card) => {
    card.addEventListener('click', (event) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
      event.stopPropagation();

      const radioButton = card.querySelector('input[type="radio"]') as HTMLInputElement;

      if (radioButton) {
        // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
        document.querySelectorAll(`input[name="${radioButton.name}"]`).forEach((rb) => {
          (rb as HTMLInputElement).checked = false;
          rb.closest('[card-checkbox-view]')?.classList.remove('is-checked');
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º checked = true –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏
        radioButton.checked = true;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å is-checked –∫ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        card.classList.add('is-checked');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ screen-name-next
        const nextScreenName = card.getAttribute('screen-name-next');
        if (nextScreenName) {
          // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;

          // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É screen-name
          const nextScreen = document.querySelector(
            `[screen-name="${nextScreenName}"]`
          ) as HTMLElement;

          if (currentScreen && nextScreen) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é
            const currentScreenName = currentScreen.getAttribute('screen-name');
            if (currentScreenName) {
              screenHistory.push(currentScreenName);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —à–∞–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
            if (!stepHistory.includes(nextScreenName)) {
              stepHistory.push(nextScreenName);
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
            switchScreen(currentScreen, nextScreen);
          }
        }
      }
    });
  });

  // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Next" –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∞
  const nextButtons = document.querySelectorAll('[screen-name-next]');
  nextButtons.forEach((button) => {
    if (button.classList.contains('button')) {
      button.addEventListener('click', (event) => {
        event.preventDefault();

        const nextScreenName = button.getAttribute('screen-name-next');
        if (nextScreenName) {
          // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
          const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;

          // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É screen-name
          const nextScreen = document.querySelector(
            `[screen-name="${nextScreenName}"]`
          ) as HTMLElement;

          if (currentScreen && nextScreen) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é
            const currentScreenName = currentScreen.getAttribute('screen-name');
            if (currentScreenName) {
              screenHistory.push(currentScreenName);
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —ç–∫—Ä–∞–Ω—ã
            switchScreen(currentScreen, nextScreen);
          }
        }
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Back"
  const backButton = document.querySelector('[form-button-back]');
  if (backButton) {
    backButton.addEventListener('click', () => {
      if (screenHistory.length > 0) {
        const prevScreenName = screenHistory.pop();
        const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;
        const prevScreen = document.querySelector(
          `[screen-name="${prevScreenName}"]`
        ) as HTMLElement;

        if (currentScreen && prevScreen) {
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–ø—É—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
          clearAllInputsOnScreen(currentScreen);

          switchScreen(currentScreen, prevScreen);
          stepHistory.pop(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
          updateStepHistoryInput();
        } else {
          const startScreen = document.querySelector('[screen-name="start"]') as HTMLElement;
          if (currentScreen && startScreen) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–ø—É—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç–∫—Ä–∞–Ω–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π
            clearAllInputsOnScreen(currentScreen);

            switchScreen(currentScreen, startScreen);
          }
        }
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Esc"
  const escButton = document.querySelector('[form-button-esc]');
  if (escButton) {
    escButton.addEventListener('click', closeForm);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∞–≤–∏—à–∏ Esc –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      closeForm();
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–æ–ª–ª–æ–º body
  function toggleBodyScroll(disable: boolean) {
    const { body } = document;
    if (disable) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
      const { scrollY } = window;
      body.style.position = 'fixed';
      body.style.top = `-${scrollY}px`;
      body.style.width = '100%';
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
      const scrollY = body.style.top;
      body.style.position = '';
      body.style.top = '';
      body.style.width = '';
      window.scrollTo(0, parseInt(scrollY || '0', 10) * -1);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
  function closeForm() {
    const formPopup = document.querySelector('[form-popup]') as HTMLElement;
    if (formPopup) {
      // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      formPopup.style.transition = 'opacity 300ms ease';
      formPopup.style.opacity = '0';

      // –í–ê–ñ–ù–û: –°–±—Ä–æ—Å –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã,
      // –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
      const allScreens = document.querySelectorAll('[screen-name]');
      allScreens.forEach((screen) => {
        clearAllInputsOnScreen(screen as HTMLElement);
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π Back –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
      entryScreenNames.length = 0;
      entryScreenNames.push('start');
      console.log('–°–±—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É');

      // –ß–µ—Ä–µ–∑ 300–º—Å –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hide –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª
      setTimeout(() => {
        formPopup.classList.add('hide');
        toggleBodyScroll(false);
      }, 300);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ "Back"
  function updateBackButtonVisibility() {
    const backButton = document.querySelector('[form-button-back]') as HTMLElement;
    const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;
    if (backButton && currentScreen) {
      const currentScreenName = currentScreen.getAttribute('screen-name') || '';

      // –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É Back –Ω–∞ —ç–∫—Ä–∞–Ω–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º—É
      // –ê —Ç–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —ç–∫—Ä–∞–Ω–µ
      const shouldHide =
        entryScreenNames.includes(currentScreenName) || currentScreenName === 'start';
      backButton.classList.toggle('hide-opacity', shouldHide);

      console.log(
        `–ö–Ω–æ–ø–∫–∞ Back ${shouldHide ? '—Å–∫—Ä—ã—Ç–∞' : '–ø–æ–∫–∞–∑–∞–Ω–∞'} –Ω–∞ —ç–∫—Ä–∞–Ω–µ ${currentScreenName}`
      );
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  function updateBottomNavVisibility() {
    const bottomNav = document.querySelector('.section_step.is-form-nav-bot') as HTMLElement;
    const currentScreen = document.querySelector('[screen-name]:not(.hide)') as HTMLElement;

    if (bottomNav && currentScreen) {
      const isChoosePartnerScreen = currentScreen.getAttribute('screen-name') === 'choose-partner';

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ choose-partner
      if (isChoosePartnerScreen) {
        bottomNav.classList.remove('hide');
      } else {
        bottomNav.classList.add('hide');
      }

      console.log(
        `–ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è ${isChoosePartnerScreen ? '–ø–æ–∫–∞–∑–∞–Ω–∞' : '—Å–∫—Ä—ã—Ç–∞'} –Ω–∞ —ç–∫—Ä–∞–Ω–µ ${currentScreen.getAttribute('screen-name')}`
      );
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "Back" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateBackButtonVisibility();

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateBottomNavVisibility();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateFormNavTip();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ —Ñ–æ—Ä–º—ã
  function logAllFormInputs() {
    const formElement = document.querySelector('form');
    if (!formElement) return;

    console.log('--- –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ —Ñ–æ—Ä–º—ã ---');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–Ω–ø—É—Ç–æ–≤
    const formData = new FormData(formElement);
    const inputValues: Record<string, string> = {};

    formData.forEach((value, key) => {
      inputValues[key] = value.toString();
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞—Ö –∏ —á–µ–∫–±–æ–∫—Å–∞—Ö
    const radioButtons = formElement.querySelectorAll('input[type="radio"]');
    const checkboxes = formElement.querySelectorAll('input[type="checkbox"]');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    const radioGroups: Record<string, { options: string[]; selected: string }> = {};

    radioButtons.forEach((radio) => {
      const radioInput = radio as HTMLInputElement;
      const { name } = radioInput;
      const { value } = radioInput;

      if (!radioGroups[name]) {
        radioGroups[name] = { options: [], selected: '' };
      }

      radioGroups[name].options.push(value);
      if (radioInput.checked) {
        radioGroups[name].selected = value;
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–¥–∏–æ-–≥—Ä—É–ø–ø–∞—Ö –≤ –æ—Ç—á–µ—Ç
    Object.entries(radioGroups).forEach(([name, group]) => {
      inputValues[`${name} (—Ä–∞–¥–∏–æ-–≥—Ä—É–ø–ø–∞)`] =
        `–í—ã–±—Ä–∞–Ω–æ: ${group.selected || '–Ω–∏—á–µ–≥–æ'} –∏–∑ [${group.options.join(', ')}]`;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–±–æ–∫—Å–∞—Ö
    checkboxes.forEach((checkbox) => {
      const checkboxInput = checkbox as HTMLInputElement;
      inputValues[`${checkboxInput.name} (—á–µ–∫–±–æ–∫—Å)`] = checkboxInput.checked
        ? '–í—ã–±—Ä–∞–Ω'
        : '–ù–µ –≤—ã–±—Ä–∞–Ω';
    });

    console.table(inputValues); // –í—ã–≤–æ–¥–∏–º –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    console.log('--- –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–ø—É—Ç–æ–≤ ---');
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω–ø—É—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —à–∞–≥–æ–≤
  function updateStepHistoryInput() {
    const stepHistoryInput = document.querySelector('[name="step-history"]') as HTMLInputElement;
    if (stepHistoryInput) {
      stepHistoryInput.value = stepHistory.join('-->');

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–ø—É—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤
      logAllFormInputs();
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π –∏–Ω–ø—É—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤
  const formElement = document.querySelector('form');

  if (formElement) {
    const stepHistoryInput = document.createElement('input');
    stepHistoryInput.type = 'hidden';
    stepHistoryInput.name = 'step-history';
    formElement.appendChild(stepHistoryInput);
    console.log('–°–æ–∑–¥–∞–Ω —Å–∫—Ä—ã—Ç—ã–π –∏–Ω–ø—É—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —à–∞–≥–æ–≤: name="step-history"');

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±–æ–º –∏–Ω–ø—É—Ç–µ —Ñ–æ—Ä–º—ã
    formElement.addEventListener('input', () => {
      logAllFormInputs();
    });

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞—Ö –∏ —á–µ–∫–±–æ–∫—Å–∞—Ö
    formElement.addEventListener('change', (event) => {
      const target = event.target as HTMLElement;
      if (
        target.tagName === 'INPUT' &&
        (target.getAttribute('type') === 'radio' || target.getAttribute('type') === 'checkbox')
      ) {
        logAllFormInputs();
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    setTimeout(logAllFormInputs, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [story-point]
  const storyPoints = document.querySelectorAll('[story-point]');
  storyPoints.forEach((point) => {
    point.addEventListener('click', () => {
      const pointName = point.getAttribute('story-point');
      if (pointName) {
        if (!stepHistory.includes(pointName)) {
          stepHistory.push(pointName);
          updateStepHistoryInput();
        }
      }
    });
  });

  // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏–Ω–ø—É—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  if (formElement) {
    formElement.addEventListener('submit', () => {
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∏–Ω–ø—É—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      console.log('--- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–ø—É—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã ---');
      const formData = new FormData(formElement);
      formData.forEach((value, key) => {
        console.log(`${key}: ${value}`);
      });
      console.log('--- –ö–æ–Ω–µ—Ü —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–Ω–ø—É—Ç–æ–≤ ---');
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    function handleFormSuccess() {
      console.log('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–±—Ä–æ—Å');

      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª–∏–∫–Ω—É—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
      const resetAnimationElement = document.querySelector('[form-reset-animation]');
      if (resetAnimationElement) {
        console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞, –∫–ª–∏–∫–∞–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ');
        try {
          (resetAnimationElement as HTMLElement).click();
          console.log('–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞:', error);
        }
      } else {
        console.log('–≠–ª–µ–º–µ–Ω—Ç [form-reset-animation] –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞
        const resetElement = document.querySelector('[fs-formsubmit-element="reset"]');
        console.log('–≠–ª–µ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞ –Ω–∞–π–¥–µ–Ω?', !!resetElement);

        if (resetElement) {
          // –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–±—Ä–æ—Å–∞
          console.log('–ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥:', resetElement);
          try {
            (resetElement as HTMLElement).click();
            console.log('–ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–±—Ä–æ—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å–±—Ä–æ—Å–∞:', error);
          }
        } else {
          console.log('–≠–ª–µ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞ [fs-formsubmit-element="reset"] –Ω–µ –Ω–∞–π–¥–µ–Ω');
          console.log('–ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
          const alternativeResetElement = document.querySelector(
            '.w-form-done button, .form-success button, [form-reset]'
          );
          if (alternativeResetElement) {
            console.log('–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞:', alternativeResetElement);
            (alternativeResetElement as HTMLElement).click();
          } else {
            console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–±—Ä–æ—Å–∞ —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
        }

        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        // –ù–æ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ñ–æ—Ä–º—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π
        console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');

        // –ü–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ñ–æ—Ä–º—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        const allScreens = document.querySelectorAll('[screen-name]');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${allScreens.length} —ç–∫—Ä–∞–Ω–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π`);

        allScreens.forEach((screen) => {
          console.log(
            `–°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ: ${(screen as HTMLElement).getAttribute('screen-name')}`
          );
          clearAllInputsOnScreen(screen as HTMLElement);
        });

        // –¢–∞–∫–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã —Ü–µ–ª–∏–∫–æ–º (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        const forms = document.querySelectorAll('form');
        forms.forEach((form) => {
          console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É:', form);
          form.reset();
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å wf-input-is-checked —É –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const checkedParents = document.querySelectorAll('.wf-input-is-checked');
        checkedParents.forEach((parent) => {
          parent.classList.remove('wf-input-is-checked');
          console.log('–£–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Å wf-input-is-checked —É —ç–ª–µ–º–µ–Ω—Ç–∞:', parent);
        });

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å is-checked —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å card-checkbox-view
        const checkedCards = document.querySelectorAll('[card-checkbox-view].is-checked');
        checkedCards.forEach((card) => {
          card.classList.remove('is-checked');
          console.log('–£–¥–∞–ª–µ–Ω –∫–ª–∞—Å—Å is-checked —É –∫–∞—Ä—Ç–æ—á–∫–∏:', card);
        });

        // –ü–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–µ–º—É
        const firstScreen = document.querySelector('[screen-name="start"]');
        if (firstScreen) {
          console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω');
          // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
          const allScreenElems = document.querySelectorAll('[screen-name]');
          allScreenElems.forEach((screen) => {
            screen.classList.add('hide');
          });
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω
          firstScreen.classList.remove('hide');
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ Back
          updateBackButtonVisibility();
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        closeForm();
      }, 5000);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ XHR –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Webflow
    const originalXHROpen = XMLHttpRequest.prototype.open;
    const originalXHRSend = XMLHttpRequest.prototype.send;

    XMLHttpRequest.prototype.open = function (method, url, ...args) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      this._webflowFormUrl = url;
      return originalXHROpen.apply(this, [method, url, ...args]);
    };

    XMLHttpRequest.prototype.send = function (data) {
      // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è load
      const originalOnLoad = this.onload;

      // –°–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è load
      this.onload = function (e) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API —Ñ–æ—Ä–º Webflow
        const url = this._webflowFormUrl || '';
        if (
          (url.includes('/api/v1/form/') || url.includes('webflow.com/api/v1/form/')) &&
          this.status === 200
        ) {
          console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Webflow API —Ñ–æ—Ä–º:', url);
          console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', this.status);
          console.log('–û—Ç–≤–µ—Ç:', this.responseText);

          // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
          setTimeout(handleFormSuccess, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        }

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (typeof originalOnLoad === 'function') {
          originalOnLoad.call(this, e);
        }
      };

      return originalXHRSend.apply(this, arguments);
    };

    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ XHR –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —Ñ–æ—Ä–º Webflow');

    // –î–ª—è Fetch API —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫
    const originalFetch = window.fetch;
    window.fetch = function (input, init) {
      return originalFetch(input, init).then((response) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API —Ñ–æ—Ä–º Webflow
        const url = typeof input === 'string' ? input : input instanceof Request ? input.url : '';
        if (
          (url.includes('/api/v1/form/') || url.includes('webflow.com/api/v1/form/')) &&
          response.status === 200
        ) {
          console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω —É—Å–ø–µ—à–Ω—ã–π fetch-–∑–∞–ø—Ä–æ—Å –∫ Webflow API —Ñ–æ—Ä–º:', url);
          console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ response.json() –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          const clonedResponse = response.clone();
          clonedResponse
            .json()
            .then((data) => {
              console.log('–û—Ç–≤–µ—Ç:', data);

              // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
              setTimeout(handleFormSuccess, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            })
            .catch((err) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞:', err);
            });
        }
        return response;
      });
    };

    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ fetch –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —Ñ–æ—Ä–º Webflow');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã —Ç–æ–∂–µ, –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

    // 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ formSubmitSuccess
    window.addEventListener('formSubmitSuccess', (event) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ formSubmitSuccess', event);
      const targetForm = event.target as HTMLElement;
      if (targetForm && targetForm.closest('form') === formElement) {
        handleFormSuccess();
      }
    });

    // 2. –î–ª—è Webflow —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞ .w-form-done
    const formContainer = formElement.closest('.w-form');
    if (formContainer) {
      // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ DOM
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList' && mutation.addedNodes.length) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === 1) {
                const element = node as HTMLElement;
                if (
                  element.classList &&
                  (element.classList.contains('w-form-done') ||
                    element.classList.contains('form-success') ||
                    element.classList.contains('w-form-success'))
                ) {
                  console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', element);
                  handleFormSuccess();
                }
              }
            });
          } else if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            const target = mutation.target as HTMLElement;
            if (
              target.classList &&
              (target.classList.contains('w-form-done') ||
                target.classList.contains('form-success') ||
                target.classList.contains('w-form-success')) &&
              !target.classList.contains('hide')
            ) {
              console.log(
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞:',
                target
              );
              handleFormSuccess();
            }
          }
        });
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      observer.observe(formContainer, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class', 'style'],
      });

      console.log('–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—Ö–∞ —Å—Ä–∞–∑—É
      const successElements = formContainer.querySelectorAll(
        '.w-form-done:not(.hide), .form-success:not(.hide), .w-form-success:not(.hide)'
      );
      if (successElements.length > 0) {
        console.log('–ù–∞–π–¥–µ–Ω—ã —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', successElements);
        handleFormSuccess();
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º open-form-trigger
  const openFormTriggers = document.querySelectorAll('[open-form-trigger]');
  openFormTriggers.forEach((trigger) => {
    trigger.addEventListener('click', (event) => {
      event.preventDefault();
      const screenName = trigger.getAttribute('open-form-trigger');
      if (screenName) {
        const formPopup = document.querySelector('[form-popup]') as HTMLElement;
        let startScreen = document.querySelector(`[screen-name="${screenName}"]`) as HTMLElement;
        if (!startScreen) {
          startScreen = document.querySelector('[screen-name="start"]') as HTMLElement;
        }
        if (formPopup && startScreen) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
          const entryScreenName = startScreen.getAttribute('screen-name');

          // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —ç–∫—Ä–∞–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
          if (entryScreenName && !entryScreenNames.includes(entryScreenName)) {
            entryScreenNames.push(entryScreenName);
            console.log(`–≠–∫—Ä–∞–Ω "${entryScreenName}" –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞`);
          }

          // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
          screenHistory.length = 0;

          // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
          document.querySelectorAll('[screen-name]').forEach((screen) => {
            (screen as HTMLElement).classList.add('hide');
          });

          // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
          formPopup.classList.remove('hide');
          startScreen.classList.remove('hide');
          updateFormNavTip();
          formPopup.style.opacity = '1';
          startScreen.style.opacity = '1';

          // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª –Ω–∞ body
          toggleBodyScroll(true);

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ Back –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
          updateBackButtonVisibility();

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          updateBottomNavVisibility();
        }
      }
    });
  });

  function updateValidateButtonState() {
    const validateScreen = document.querySelector('[validate]');
    if (!validateScreen) return;

    const checkboxes = validateScreen.querySelectorAll('input[type="checkbox"]');
    const validateButton = validateScreen.querySelector('[validate-button]');

    if (!validateButton) return;

    const isAnyCheckboxChecked = Array.from(checkboxes).some(
      (checkbox) => (checkbox as HTMLInputElement).checked
    );

    if (isAnyCheckboxChecked) {
      validateButton.classList.remove('disabled');
    } else {
      validateButton.classList.add('disabled');
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
  const validateScreen = document.querySelector('[validate]');
  if (validateScreen) {
    const checkboxes = validateScreen.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener('change', updateValidateButtonState);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updateValidateButtonState();
  }
});
